{
  "name": "dustjs-linkedin",
  "version": "0.4.0",
  "author": {
    "name": "Aleksander Williams"
  },
  "description": "Asynchronous templates for the browser and node.js",
  "contributors": [
    {
      "name": "Jairo de Morais",
      "email": "jdemorais@linkedin.com"
    },
    {
      "name": "Veena Basavaraj",
      "email": "vbasavaraj@linkedin.com"
    }
  ],
  "scripts": {
    "test": "node test/jasmine-test/server/specRunner.js",
    "start": "node src/build.js"
  },
  "bin": {
    "dustc": "./bin/dustc"
  },
  "main": "./lib/dust",
  "repository": {
    "type": "git",
    "url": "https://jairodemorais@github.com/linkedin/dustjs.git"
  },
  "keywords": [
    "templates",
    "views"
  ],
  "devDependencies": {
    "jasmine-node": "1.0.x"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.5"
  },
  "readme": "Dust  [![Build Status](https://secure.travis-ci.org/linkedin/dustjs.png)](http://travis-ci.org/linkedin/dustjs)\n====\n\nDemo & Guide\n------------\n√ü\nExtensive docs and a full demo are available at <http://akdubya.github.com/dustjs>\n\n\n> Asynchronous templates for the browser and node.js\n\n#### <http://akdubya.github.com/dustjs> #\n\nHighlights!\n----\n\nI like [Mustache](http://mustache.github.com) and variants but none of them offers quite what I need.\n\nUse Dust if you want these things:\n\n* async/streaming operation\n* browser/node compatibility\n* extended Mustache/ctemplate syntax\n* clean, low-level API\n* [high performance](http://akdubya.github.com/dustjs/benchmark/index.html)\n* composable templates\n\n\nThis is the LinkedIn fork of dust.js\n====================================\n\nDetails in the blog post : http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates\n\nWe will gradually be extending this library with helper functions and bug fixes. \n\nCurrent LinkedIn additions include:\n--------------------------\n\n* Fix to peg.js to print the line and column number for syntax errors in dust templates\n* Fix to support > node0.4 \n* Addition of jasmine test suite, BDD with dust.js \n* There are cases of rendering logic that are best done in templates. @if helper that relies entirely on the js eval for expression evaluation, The perf results are here: <http://jsperf.com/dust-if>. We intend to replace the slow js eval with a expression parser soon \n* Section index for lists of maps stored in the dust context for ease of writing simple logic in templates\n* Section size for lists of maps stored in the dust context for ease of  writing simple logic in templates\n\nInstallation\n------------\n\nFor Linkedin Dustjs\n\n    $ npm install dustjs-linkedin\n\nTo render compiled templates in the browser:\n\n    <script src=\"dust-core-0.4.0.min.js\"></script>\n\nTo compile a template on the command line, use the dustc command.\nIts syntax is:\n\n    dustc [{-n|--name}=<template_name>] {inputfilename|-} [<outputfilename>]\n\nFor example, to compile a template on the command line and have it\nregistered under the same name as the source file:\n\n    $ dustc template.html\n\nYou can customize the name under which the template is registered:\n\n    $ dustc --name=mytemplate template.html\n    \n**Support logic helper @if**\n----------------------------\n\nDust supports the exists (?) and not exists (^?). Nested exists block easily allow for (exp1 AND exp2 AND exp3), but  (exp1 OR exp2 ) is not possible.@if helper comes handy in cases where an OR operation is required.\n\n*Example 1:*\n\n     {@if cond=\"('{x}'.length || '{y}'.length ) || (2 > 3) && {a}-{b} == 9\"}\n      render if\n     {:else}\n      render else\n     {/if}\n\n**Section index for lists of maps stored in the dust context**\n---------------------------------------------------\n\n*Example 2: $idx is the Loop index in dust #loop*\n\n    {#people}\n    <li class=\"card  \n     {@if cond=\"({$idx} == {$len})\"}last{/if}\" data-member-id=\"{id}\"  id=\"card-{id}\">\n     </li>\n    {/people}\n\n**Section size for lists of maps stored in the dust context**\n----------------------------------------\n\n*Example 3: $len, Loop size in dust #loop*\n\n    {#people} \n    <li class=\"card  {@if cond=\"({$len} + 1) % 2 == 0\"} odd {:else} even {/if} \" data-member-id=\"{id}\"  id=\"card\\-{id}\"> </li> \n    {/people}\n\n*Example 4: Inside lists of primitives,$idx and $len cannot be used, and {@idx} can be used instead*\n\n    JSON : {\"skills\": [\"jasmine\", \"qunit\", \"javascript\"]}\n    {#skills}\n     <li>\n     <span class='{@idx}\n      {@if cond=\"{.} == '{skills}'.split(',').length -1\"}\n        last\n      {/if}\n     {/idx}'>\n     {.}</span> \n     </li>\n    {/skills}\n\n*Example 5: @if with else*   \n\n    {@if cond=\"'{names}'.split(',').length == 3 \"}\n     {@pre.i18n key=\"yes\" text=\"Yes, there are 3 names\"/} \n    {:else}\n     {@pre.i18n key=\"no\" text=\"No, there are less than 3 names\"/}\n    {/if}\n\nGlobal Aliases\n----------------------\n\nMost often we tend to reuse the same data in the template again and again ... One way to avoid been repetitive is use aliases. So a common question was, how does dust support this ?\n\nWell, in dust there is more than one way neat way to do this.\n\n*Use Inline Partials*\n\nInline partials never output content themselves, and are always global to the template in which they are defined, so the order of their definition has no significance.\n\nKey points to note : They are global to the template., there is no ordering and can be defined anywhere\n\n*Step 1* create global alias\n\n     {<greeting}Hello, Hola{/greeting}   \n\n*Step 2*\n\n     {#names}\n       {.} {+greeting/} \n     {/names}\n\n     {#projects}\n       {.} {+greeting/}\n     {/projects}\n\n\n\nBlock Aliases\n----------------------\nInline parameters appear within the section's opening tag. Parameters are separated by a single space.\n\n     {#profile bar=\"baz\" bing=\"bong\"}\n      {name}, {bar}, {bing}\n     {/profile}\n\n*There are 3 flavors*\n\n    {#test greeting=\"hello\"} // constant hello\n     {greeting}\n    {/test}\n\n    {#test greeting=hello} // looks for a json context hello in the JSON hierarchy\n     {greeting}\n    {/test}\n\n    {#test greeting=\"{hello}\"} // resolves hello when greeting is referenced in the block and it resolves to the first one in the hierarchy\n     {greeting}\n    {/test}\n\n\nTemplate Inheritance\n----------------------------\n\nDust by default allows template inheritance with the concept of partials and inline partials\n\nExample 1:\n--------------------\n\n*partial.tl  ( this serves as the base template )*\n\n     \n       {+greeting} Hola {/greeting}\n       {+world} World {/world}\n\n\n*main_without_override.tl  ( this serves as the child template )*\n\n\n      {>partial/}\n\n*output*\n\nWhen the main_without_override.tl is rendered ...\n\n  Hola\n  World\n\nmain_with_override.tl  ( this serves as the child template )\n-----------------\n\n      {>partial/}\n       {<greeting}\n         Hello\n       {/greeting}\n\n*output*\n\n\nWhen the main_with_override.tl  is rendered ...\n\n  Hello\n  World\n\n\n*main_with_loops.tl*\n\n\n      {>partial/}\n       {#projects\n         {<greeting}\n           Hello {.name}\n        {/greeting}\n        {/projects}\n        {<world}{/world} {! override to print nothing !}\n\n\n*output*\n\n\nWhen the main_with_loops.tl  is rendered ... ( says projects has three entries with the name field )\n\n   Hello project 1\n   Hello project 2\n   Hello project 3\n  \nExample 2\n---------------\n\n*base.tl*\n\n\t    {+greeting}hello{/greeting}\n\t    {+world/}\n\n*footer.tl*\n\n      Common footer\n\n*base_end.tl*\n\n\n\t    {>\"footer\"/}\n\t    {+bye} bye {/bye}\n\n\n*main.tl*\n\n\t      {>\"head\"/}\n\t        BODY\n\t      {>\"foot\"/}\n\n*head.tl*\n\n\t     {>\"base\"/}\n\t     {<world} World {/world}\n\t        START\n\n*foot.tl*\n\n\t      END\n\t      {>\"base\"/}\n\t      {<greeting}bye{/greeting}\n\n*foot_with_no_end.tl*\n\n\t      END\n\t      {>\"base_end\"/}\n\t      {<bye} {! Do not print bye | }{/bye}\n\n\n\n\n*output ( when I render main.tl with foot.tl )*\n\nhello World START  BODY  END bye\n\n\n*output ( when I render main.tl with foot_with_no_end.tl )*\n\nhello World START  BODY  END common footer\n\n\nComposable templates?\n---------------------\n\n    {^xhr}\n      {>base_template/}\n    {:else}\n      {+main/}\n    {/xhr}\n    {<title}\n      Child Title\n    {/title}\n    {<main}\n      Child Content\n    {/main}\n\n\n\nDynamic Partials\n----------------\n\nThe name of the partial can be determined at render time. Primarily useful when a partial is loaded based on the ab-test key.\n\n{>\"/path/{abkey}.tl\"/}\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/linkedin/dustjs/issues"
  },
  "homepage": "https://github.com/linkedin/dustjs",
  "_id": "dustjs-linkedin@0.4.0",
  "_from": "dustjs-linkedin@0.4.0"
}
